#+PROPERTY: header-args :tangle yes

* Init
** Enable lexical binding
#+BEGIN_SRC emacs-lisp
;;;  -*- lexical-binding: t; -*-
#+END_SRC

** OS helper macros
Macros for platform-specific code

#+BEGIN_SRC emacs-lisp
(defmacro linux-p ()
  (eq system-type 'gnu/linux))

(defmacro osx-p ()
  (eq system-type 'darwin))

(defmacro cygwin-p ()
  (eq system-type 'cygwin))

(defmacro ms-windows-p ()
  (eq system-type 'windows-nt))

(defmacro when-linux (&rest body)
  `(if (linux-p) (progn ,@body)))

(defmacro when-osx (&rest body)
  `(if (osx-p) (progn ,@body)))

(defmacro when-cygwin (&rest body)
  `(if (cygwin-p) (progn ,@body)))

(defmacro when-windows (&rest body)
  `(if (ms-windows-p) (progn ,@body)))

(defmacro unless-linux (&rest body)
  `(if (linux-p) nil ,@body))

(defmacro unless-osx (&rest body)
  `(if (osx-p) nil ,@body))

(defmacro unless-windows (&rest body)
  `(if (ms-windows-p) nil ,@body))
#+END_SRC

** Garbage collection
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp :tangle yes
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC

** Byte compile warnings
Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

** Some basic variables

#+BEGIN_SRC emacs-lisp :tangle yes
(prefer-coding-system 'utf-8)

(setq-default tab-width 4
	      indent-tabs-mode nil)

(fset 'yes-or-no-p 'y-or-n-p)
(setq create-lockfiles nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

** Disable custom settings
Don't add customised settings to init.el

#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

** Fill column
#+BEGIN_SRC emacs-lisp :tangle yes
(defun sanityinc/maybe-adjust-visual-fill-column ()
  "Readjust visual fill column when the global font size is modified.
This is helpful for writeroom-mode, in particular."
  ;; TODO: submit as patch
  (if visual-fill-column-mode
      (add-hook 'after-setting-font-hook 'visual-fill-column--adjust-window nil t)
    (remove-hook 'after-setting-font-hook 'visual-fill-column--adjust-window t)))

(add-hook 'visual-fill-column-mode-hook
          'sanityinc/maybe-adjust-visual-fill-column)
#+END_SRC

** Keep history for recently accessed files
#+BEGIN_SRC emacs-lisp :tangle yes
(recentf-mode 1)
(setq-default
 recentf-max-saved-items 1000
 recentf-exclude '("/tmp/" "/ssh:"))

(add-to-list 'recentf-exclude (format "%s/.*" (expand-file-name "elpa" user-emacs-directory)))
#+END_SRC

** Enable double-buffering
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+END_SRC

** Midnight mode
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'midnight)
(midnight-mode)
#+END_SRC

** Encryption
#+BEGIN_SRC emacs-lisp :tangle yes
(unless-windows
 (require 'epa-file)
 (custom-set-variables `(epg-gpg-program  ,(if (osx-p) "/opt/homebrew/bin/gpg" "gpg")))
 (epa-file-enable))
#+END_SRC

** TLS1.3 workaround
Looks like emacs 26 has problems with TLS1.3, temporary disable it.
See https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341

#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp :tangle yes
(setq
 backup-by-copying t
 backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
 delete-old-versions t
 kept-new-versions 16
 kept-old-versions 2
 version-control t)
#+END_SRC

** Sessions
#+BEGIN_SRC emacs-lisp :tangle yes
(setq desktop-path (list user-emacs-directory)
      desktop-auto-save-timeout 600
      desktop-load-locked-desktop t)

(desktop-save-mode 1)

(let ((default (eval (car (get 'desktop-files-not-to-save 'standard-value)))))
  (setq desktop-files-not-to-save
        (eval
         `(rx (or (regexp ,default)
                  (and (or ".plstore"
                           ".desktop"
                           ;; Don't save .gpg files. Restoring those files
                           ;; in emacsclient causes a problem as the
                           ;; password prompt appears before the frame is
                           ;; loaded.
                           ".gpg"
                           ;; FIXME
                           ;; If backup files with names like
                           ;; "file.sv.1.bkp" are saved to the desktop file,
                           ;; emacsclient crashes at launch Need to debug
                           ;; why that's the case. But for now, simply not
                           ;; saving the .bkp files to the desktop file
                           ;; works -- Fri Jun 19 16:45:50 EDT 2015
                           ".bkp"
                           ;; I do not typically plan to re-open the .el.gz
                           ;; files opened in my previous sessions.
                           ".el.gz"
                           "TAGS")
                       line-end))))))

(setq desktop-globals-to-save
      (append '((comint-input-ring        . 50)
                (compile-history          . 30)
                desktop-missing-file-warning
                (dired-regexp-history     . 20)
                (extended-command-history . 30)
                (face-name-history        . 20)
                (file-name-history        . 100)
                (grep-find-history        . 30)
                (grep-history             . 30)
                (ido-buffer-history       . 100)
                (ido-last-directory-list  . 100)
                (ido-work-directory-list  . 100)
                (ido-work-file-list       . 100)
                (magit-read-rev-history   . 50)
                (minibuffer-history       . 50)
                (org-clock-history        . 50)
                (org-refile-history       . 50)
                (org-tags-history         . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                register-alist
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                tags-table-list)))

(setq-default history-length 1000)
(savehist-mode t)
#+END_SRC

** Calendar
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'calendar)
(require 'holidays)

(setq calendar-mark-holidays-flag t)

;; holiday settings for Toronto
(setq calendar-latitude [43 39 north])
(setq calendar-longitude [79 22 west])
(setq calendar-location-name "Toronto, CA")

(setq calendar-christian-all-holidays-flag nil)

;; remove non-relevant holidays
(setq holiday-general-holidays nil)
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-oriental-holidays nil)
(setq holiday-bahai-holidays nil)

(setq holiday-canadian-statutory-holidays
      '((holiday-fixed 01 01 "New Year's Day")
        (holiday-easter-etc -2 "Good friday")
        (holiday-fixed 07 01 "Canada Day")
        (holiday-float 10 1 2 "Thanksgiving") ; Second monday of october
        (holiday-fixed 11 11 "Remembrance day")
        (holiday-fixed 12 25 "Christmas")
        (holiday-fixed 12 26 "Boxing Day")
        (holiday-float 05 1 -1 "Victoria day" 24)  ;Monday before May 24
        (holiday-float 08 1 1 "Civic Public Holiday") ; First monday of August
        (holiday-float 09 1 1 "Labour day") ; First monday in september
        ))

(setq holiday-local-holidays
      '((holiday-fixed 02 14 "Valentine's Day")
        (holiday-float 02 1 3 "Family day") ;Third monday in february
        (holiday-fixed 04 01 "April Fools' Day")
        (holiday-float 5 0 2 "Mother's Day")
        (holiday-float 6 0 3 "Father's Day")
        (holiday-fixed 11 11 "Remembrance day")
        (holiday-advent 0 "Advent")
        (holiday-easter-etc 0 "Easter Sunday")
        (holiday-easter-etc 39 "Ascension Day")
        (holiday-easter-etc 49 "Pentecost (Whitsunday)")
        (holiday-fixed 10 31 "Halloween")
        ))

;; The above settings won't be used because calendar-holidays has already been
;; generated; it has to be re-filled.
(setq calendar-holidays
      (append
       holiday-canadian-statutory-holidays
       holiday-local-holidays
       holiday-solar-holidays))

(defun insert-date ()
  (interactive)
  (insert
   (calendar-date-string
    (calendar-gregorian-from-absolute
     (calendar-absolute-from-gregorian (calendar-current-date))))))
#+END_SRC

** Highlight matching parens
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC

** Use xwidget webkit if possible
#+BEGIN_SRC emacs-lisp :tangle yes
(if (featurep 'xwidget-internal)
    (setq browse-url-browser-function 'xwidget-webkit-browse-url))
#+END_SRC

** Platform-specific
Shell initialization for Windows

#+BEGIN_SRC emacs-lisp
(defun init-bash (bash-executable)
  (setq explicit-shell-file-name bash-executable)
  (setq shell-file-name "bash")
  (setq explicit-bash-args '("--noediting" "--login" "-i"))
  (setenv "SHELL" shell-file-name)
  (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m))

(when-windows
 (let ((git-bash "C:/Program Files/Git/bin/sh.exe"))
   (when (file-readable-p git-bash)
     (message "Setting up git bash")
     (init-bash git-bash))))

(when-cygwin
 (let ((cygwin-bin "/c/opt/cygwin64/bin"))
   (when (file-readable-p cygwin-bin)
     (message "Setting up cygwin")
     
     (setq exec-path (cons cygwin-bin exec-path))
     (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))
     (init-bash "bash"))))
#+END_SRC

** Cookies
Disable http cookies

#+BEGIN_SRC emacs-lisp
(setq url-cookie-untrusted-urls '(".*"))
#+END_SRC

* ELisp Extensions
** Copy Org link
#+BEGIN_SRC emacs-lisp
(defun org-copy-link ()
  "Extract the link location at point and put it on the killring."
  (interactive)
  (when (org-in-regexp org-bracket-link-regexp 1)
    (kill-new (org-link-unescape (org-match-string-no-properties 1)))))
#+END_SRC

** Toggle delete-other-window command
Taken from zygospore, changed window restore behavior.

#+BEGIN_SRC emacs-lisp
(defun kwarks/toggle-delete-other-windows ()
  "Toggle \\[delete-other-window] command.
If the current frame has several windows, it will act as `delete-other-windows'.
If the current frame has one window,
it will restore the window configuration to prior to full-framing."
  (interactive)
  (let ((window-state-register-name "kwarks/last-window-state"))
    (cond
     ((equal (selected-window) (next-window))
      (let ((cb (current-buffer)))
        (jump-to-register window-state-register-name)
        (switch-to-buffer cb)))
     (t
      (window-configuration-to-register window-state-register-name)
      (delete-other-windows)))))

(global-set-key (kbd "C-x 1") 'kwarks/toggle-delete-other-windows)
#+END_SRC

** Insert horizontal divider line

#+BEGIN_SRC emacs-lisp :tangle yes
(defun insert-divider ()
  "Insert horizontal line, i.e. FORM FEED (FF)."
  (interactive)
  (insert #x0C))
#+END_SRC

** Remove leading and tailing spaces.

#+BEGIN_SRC emacs-lisp
(defun trim (str)
  "Remove leading and tailing whitespace from STR."
  (replace-regexp-in-string (rx (or (: bos (* (any " \t\n")))
                                    (: (* (any " \t\n")) eos)))
                            ""
                            str))
#+END_SRC

** Check if string is empty

#+BEGIN_SRC emacs-lisp
(defun empty-string-p (string)
  "Return true if the STRING is empty or nil.  Expects string."
  (or (null string)
      (zerop (length (trim string)))))
#+END_SRC

** Execute shell command in an active shell session

#+BEGIN_SRC emacs-lisp
(defun run-shell-command (cmd)
  (let ((shell-process (get-buffer-process "*shell*")))
    (cond ((not (null shell-process))
           (process-send-string "shell" (concat cmd "\n"))))))
#+END_SRC

** Proxy functions

#+BEGIN_SRC emacs-lisp
(defun kwarks/set-proxy (proxy-host)
  (setq url-proxy-services
        `(("no_proxy" . "^\\(localhost\\|10.*\\)")
          ("http" . ,proxy-host)
          ("https" . ,proxy-host)))
  (setenv "http_proxy" (concat "http://" proxy-host))
  (setenv "https_proxy" (concat "http://" proxy-host))
  (setenv "HTTP_PROXY" (concat "http://" proxy-host))
  (setenv "HTTPS_PROXY" (concat "http://" proxy-host))
  (run-shell-command (concat "export http_proxy=http://" proxy-host))
  (run-shell-command (concat "export https_proxy=http://" proxy-host))
  (run-shell-command (concat "export HTTP_PROXY=http://" proxy-host))
  (run-shell-command (concat "export HTTPS_PROXY=http://" proxy-host)))

(defun proxy-on ()
  "Set proxy."
  (interactive)
  (let ((proxy-host
         (read-string "proxy host: "
                      (if (bound-and-true-p *proxy-host*) *proxy-host* ""))))
    (unless (empty-string-p proxy-host)
      (kwarks/set-proxy proxy-host)
      (message "proxy is set to %s" proxy-host))))

(defun proxy-off ()
  "Unset proxy."
  (interactive)
  (setq url-proxy-services ())
  (setenv "http_proxy" "")
  (setenv "https_proxy" "")
  (setenv "HTTP_PROXY" "")
  (setenv "HTTPS_PROXY" "")
  (run-shell-command "unset http_proxy")
  (run-shell-command "unset https_proxy")
  (run-shell-command "unset HTTP_PROXY")
  (run-shell-command "unset HTTPS_PROXY")
  (message "proxy is off"))
#+END_SRC

** Custom session management

#+BEGIN_SRC emacs-lisp
(defun saved-session ()
  (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))

;; use session-save to save the desktop manually
(defun session-save ()
  "Save an Emacs session."
  (interactive)
  (if (saved-session)
      (if (y-or-n-p "Overwrite existing desktop? ")
          (desktop-save-in-desktop-dir)
        (message "Session not saved."))
    (desktop-save-in-desktop-dir)))

;; use session-restore to restore the desktop manually
(defun session-restore ()
  "Restore a saved Emacs session."
  (interactive)
  (if (saved-session)
      (desktop-read)
    (message "No desktop found.")))
#+END_SRC

** Clear shell buffer

#+BEGIN_SRC emacs-lisp
(defun clear-shell ()
  "Cleans shell buffer."
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+END_SRC

** XML pretty print

#+BEGIN_SRC emacs-lisp
(defun xml-pretty-print-region (begin end)
  "Pretty format XML markup in region from BEGIN to END.
You need to have 'nxml-mode'
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do this.
The function inserts linebreaks to separate tags that have nothing
but whitespace between them.
It then indents the markup by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
    (nxml-mode)
    (goto-char begin)
    (while (search-forward-regexp "\>[ \\t]*\<" nil t)
      (backward-char) (insert "\n") (setq end (1+ end)))
    (indent-region begin end))
  (message "Ah, much better!"))
#+END_SRC

** Hide ^M symbols
#+BEGIN_SRC emacs-lisp
(defun hide-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+END_SRC

** hex/unhex region
#+BEGIN_SRC emacs-lisp
(defun kwarks/region-apply (start end func)
  "apply a function to the region between START and END in current buffer."
  (save-excursion
    (let ((text (delete-and-extract-region start end)))
      (insert (funcall func text)))))

(defun kwarks/url-encode (start end)
  "urlencode the region between START and END in current buffer."
  (interactive "r")
  (kwarks/region-apply start end #'url-hexify-string))

(defun kwarks/url-decode (start end)
  "de-urlencode the region between START and END in current buffer."
  (interactive "r")
  (kwarks/region-apply start end #'url-unhex-string))
#+END_SRC
** Edit current file as root

#+BEGIN_SRC emacs-lisp
(defun sudo-edit (&optional arg)
  "Reopens current buffer or ARG as root."
  (interactive "p")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

** Passwords management
/C-c C-p u/ - get user name
/C-c C-p p/ - get password
/C-c C-p g/ - generate password
/C-c C-p h/ - generate hashed password

For password generation install /pwgen/
For hashed passwords install /openssl/

See https://bitbucket.org/alfaromurillo/org-passwords.el/src/master/org-passwords.el
See http://hashapass.com/

#+BEGIN_SRC emacs-lisp :tangle yes
;; disable encrypted & temporary files scanning
(setq dabbrev-ignored-buffer-regexps '(".*\.gpg$" "^ [*].*"))

(defun kwarks--company-dabbrev-ignore (buffer)
  (let (res)
    ;; don't search in encrypted files, or hidden buffers
    (dolist (re dabbrev-ignored-buffer-regexps res)
      (if (string-match-p re (buffer-name buffer))
          (setq res t)))))

(setq company-dabbrev-ignore-buffers 'kwarks--company-dabbrev-ignore)

(require 'org)

(define-derived-mode kwarks/org-passwords-mode org-mode
  "org-passwords-mode"
  "Mode for storing passwords"
  nil)

(defgroup kwarks/org-passwords nil
  "Options for password management."
  :group 'org)

(defcustom kwarks/org-passwords-file "~/Dropbox/private/passwords.org.gpg"
  "Default file name for the file that contains the passwords."
  :type 'file
  :group 'kwarks/org-passwords)

(defcustom kwarks/org-passwords-kill-password-buffer-timer-time 60
  "Time in seconds that the password file will remain open.  It
  may be an integer or a floating point number."
  :type 'number
  :group 'kwarks/org-passwords)

(setq kwarks/org-passwords-kill-password-buffer-timer nil)

(defcustom kwarks/org-passwords-wait-time "30 sec"
  "The default period to wait before erasing the password from the clipboard.
Must be compatible with `run-at-time'."
  :type 'string
  :group 'kwarks/org-passwords)

(defcustom kwarks/org-passwords-system-clipboard-only nil
  "If T password will not put generated password to Emacs kill ring."
  :type 'boolean
  :group 'kwarks/org-passwords)

(defun kwarks/string->clipboard (string)
  "Copy STRING to system clipboard."
  (if kwarks/org-passwords-system-clipboard-only
      (funcall interprogram-cut-function string)
    (kill-new string)))

(defun kwarks/org-passwords-copy-username ()
  "Put username associated with the entry at the location of the cursor into system clipboard."
  (interactive)
  (kwarks/string->clipboard (org-entry-get (point) "USERNAME" t)))

(defun kwarks/org-passwords-copy-password ()
  "Put password associated with the entry at the location of the cursor into system clipboard."
  (interactive)
  (kwarks/string->clipboard (org-entry-get (point) "PASSWORD")))

(defun kwarks/org-passwords-open-url ()
  "Browse the URL associated with the entry at the location of the cursor."
  (interactive)
  (browse-url (org-entry-get (point) "URL" t)))

(defun kwarks/org-passwords-random-password ()
  (interactive)
  (let ((pwd (string-trim (shell-command-to-string "pwgen -n -c -N1 10"))))
    (kwarks/string->clipboard pwd)
    (run-at-time kwarks/org-passwords-wait-time nil (lambda () (kwarks/string->clipboard "")))
    (message "Generated password has been copied to clipboard")))

(defun kwarks/org-passwords-hashed-password ()
  "Generate strong password based on parameter and master password."
  (interactive)
  (let* ((param (read-string "parameter: "))
         (password (read-passwd "master password: "))
         (hashed-pwd (trim (shell-command-to-string
                            (format "echo -n %s | openssl dgst -sha1 -binary -hmac %s | openssl enc -base64 | cut -c 1-8" param password)))))
    (kwarks/string->clipboard hashed-pwd)
    (run-at-time kwarks/org-passwords-wait-time nil (lambda () (kwarks/string->clipboard "")))
    (message "Generated password has been copied to clipboard")))

(defun kwarks/org-passwords (&optional arg)
  (interactive "P")
  (if kwarks/org-passwords-file
      (progn
        (add-to-list 'auto-mode-alist
                     (cons
                      (regexp-quote
                       (expand-file-name kwarks/org-passwords-file))
                      'kwarks/org-passwords-mode))
        (if kwarks/org-passwords-kill-password-buffer-timer
            (setq kwarks/org-passwords-kill-password-buffer-timer nil))
        (and (or
              (and arg (find-file kwarks/org-passwords-file))
              (find-file-read-only kwarks/org-passwords-file))
             (kwarks/org-passwords-set-up-kill-password-buffer-timer)))
    (minibuffer-message "No default password file defined.  Set the variable `org-password-file'.")))

(defun kwarks/org-passwords-set-up-kill-password-buffer-timer ()
  (setq kwarks/org-passwords-kill-password-buffer-timer
        (run-with-idle-timer kwarks/org-passwords-kill-password-buffer-timer-time
                             nil
                             '(lambda ()
                                (if (get-file-buffer kwarks/org-passwords-file)
                                    (kill-buffer
                                     (get-file-buffer kwarks/org-passwords-file)))))))

(define-key kwarks/org-passwords-mode-map (kbd "C-c C-p u") 'kwarks/org-passwords-copy-username)
(define-key kwarks/org-passwords-mode-map (kbd "C-c C-p p") 'kwarks/org-passwords-copy-password)
(define-key kwarks/org-passwords-mode-map (kbd "C-c C-p g") 'kwarks/org-passwords-random-password)
(define-key kwarks/org-passwords-mode-map (kbd "C-c C-p h") 'kwarks/org-passwords-hashed-password)
(define-key kwarks/org-passwords-mode-map (kbd "C-c C-p o") '(lambda ()
                                                               (interactive)
                                                               (kwarks/org-passwords-copy-password)
                                                               (kwarks/org-passwords-open-url)))

#+END_SRC
** Number to string convertion

Port of common lisp (format nil "~r" 1234) and (format nil "~:r" 1234) functions:

#+BEGIN_EXAMPLE
(number-to-english-cardinal 1234) ==> "one thousand two hundred thirty-four"
(number-to-english-ordinal 1234) ==> "one thousand two hundred thirty-fourth"
#+END_EXAMPLE

see https://github.com/sbcl/sbcl/blob/e95100470561cfda5a2f8efd70274509d340686a/src/code/target-format.lisp

#+BEGIN_SRC emacs-lisp
(defvar *cardinal-ones*
  (vector nil "one" "two" "three" "four" "five" "six" "seven" "eight" "nine"))

(defvar *cardinal-tens*
  (vector nil nil "twenty" "thirty" "forty"
          "fifty" "sixty" "seventy" "eighty" "ninety"))

(defvar *cardinal-teens*
  (vector "ten" "eleven" "twelve" "thirteen" "fourteen"
          "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"))

(defvar *cardinal-periods*
  (vector "" " thousand" " million" " billion" " trillion" " quadrillion"
          " quintillion" " sextillion" " septillion" " octillion" " nonillion"
          " decillion" " undecillion" " duodecillion" " tredecillion"
          " quattuordecillion" " quindecillion" " sexdecillion" " septendecillion"
          " octodecillion" " novemdecillion" " vigintillion"))

(defvar *ordinal-ones*
  (vector nil "first" "second" "third" "fourth"
          "fifth" "sixth" "seventh" "eighth" "ninth"))

(defvar *ordinal-tens*
  (vector nil "tenth" "twentieth" "thirtieth" "fortieth"
          "fiftieth" "sixtieth" "seventieth" "eightieth" "ninetieth"))

(defun number-to-english-small-cardinal (n)
  (let ((result "")
        (hundreds (truncate n 100))
        (rem (% n 100)))
    (when (cl-plusp hundreds)
      (setq result (concat result
                           (elt *cardinal-ones* hundreds)
                           " hundred"))
      (when (cl-plusp rem)
        (setq result (concat result " "))))
    (when (cl-plusp rem)
      (let ((tens (truncate rem 10))
            (ones (% rem 10)))
        (cond ((< 1 tens)
               (setq result (concat result (elt *cardinal-tens* tens)))
               (when (cl-plusp ones)
                 (setq result (concat result
                                      "-"
                                      (elt *cardinal-ones* ones)))))
              ((= tens 1)
               (setq result (concat result (elt *cardinal-teens* ones))))
              ((cl-plusp ones)
               (setq result (concat result (elt *cardinal-ones* ones)))))))
    result))

;; (number-to-english-small-cardinal 100)

(defun number-to-english-cardinal-aux (n period err)
  (let ((result "")
        (beyond (truncate n 1000))
        (here (% n 1000)))
    (unless (<= period 21)
      (error "Number too large to print in English: %d" err))
    (unless (zerop beyond)
      (setq result (concat result
                           (number-to-english-cardinal-aux beyond (1+ period) err))))
    (unless (zerop here)
      (unless (zerop beyond)
        (setq result (concat result " ")))
      (setq result (concat result
                           (number-to-english-small-cardinal here)
                           (elt *cardinal-periods* period))))
    result))

;; (number-to-english-cardinal-aux 1000 0 1000)

(defun number-to-english-cardinal (n)
  "Return number N as a human readable english cardinal number."
  (interactive "nNumber? ")
  (let ((result ""))
    (cond ((cl-minusp n)
           (setq result (concat result
                                "negative "
                                (number-to-english-cardinal-aux (- n) 0 n))))
          ((zerop n)
           (setq result "zero"))
          (t
           (setq result (number-to-english-cardinal-aux n 0 n))))
    (when (called-interactively-p 'any)
      (print result))
    result))

;; (number-to-english-cardinal 10000432320000123)

(defun number-to-english-ordinal (n)
  "Return number N as a human readable english ordinal number."
  (interactive "nNumber? ")
  (let ((result ""))
    (when (cl-minusp n)
      (setq result "negative "))
    (let ((number (abs n)))
      (let ((top (truncate number 100))
            (bot (% number 100)))
        (unless (zerop top)
          (setq result (concat result (number-to-english-cardinal (- number bot)))))
        (when (and (cl-plusp top) (cl-plusp bot))
          (setq result (concat result " ")))
        (let ((tens (truncate bot 10))
              (ones (% bot 10)))
          (cond ((= bot 12)
                 (setq result (concat result "twelfth")))
                ((= tens 1)
                 (setq result (concat result
                                      (elt *cardinal-teens* ones)
                                      "th")))
                ((and (zerop tens) (cl-plusp ones))
                 (setq result (concat result (elt *ordinal-ones* ones))))
                ((and (zerop ones)(cl-plusp tens))
                 (setq result (concat result (elt *ordinal-tens* tens))))
                ((cl-plusp bot)
                 (setq result (concat result
                                      (elt *cardinal-tens* tens)
                                      "-"
                                      (elt *ordinal-ones* ones))))
                ((cl-plusp number)
                 (setq result (concat result "th")))
                (t
                 (setq result (concat result "zeroth")))))))
    (when (called-interactively-p 'any)
      (print result))
    result))

;; (osx-say (number-to-english-ordinal 12345))
;; (number-to-english-ordinal 12345)
#+END_SRC

** Lock screen

#+BEGIN_SRC emacs-lisp
(when-osx
  (defun osx-lock-screen ()
    "Start screensaver on OSX."
    (interactive)
    (start-process
     "screensaver" nil
     "open" "-a" "/System/Library/CoreServices/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine")))
#+END_SRC
** Speak text

#+BEGIN_SRC emacs-lisp
(when-osx
  (defun osx-say (phrase)
    "Speak PHRASE."
    (interactive "MSay what? ")
    (start-process "say" nil "say" phrase)))
#+END_SRC

** Canada Post parcel status
#+BEGIN_SRC emacs-lisp
(defun kwarks/canadapost-status (tracking-number)
  "Check parcel location and status from Canada Post"
  (interactive "MTracking number: ")
  (require 'json)
  (with-temp-buffer
    (url-insert-file-contents
     (format "https://www.canadapost.ca/trackweb/rs/track/json/package?pins=%s" tracking-number))
    (let* ((json-object-type 'hash-table)
           (json-array-type 'list)
           (json-key-type 'string)
           (json (car (json-read)))
           (event (gethash "latestEvent" json)))
      (if event
          (let ((datetime (gethash "datetime" event))
                (location (gethash "locationAddr" event)))
            (message (format "[%s %s %s, %s] %s"
                             (gethash "date" datetime)
                             (gethash "time" datetime)
                             (capitalize (gethash "city" location))
                             (capitalize (gethash "countryNmEn" location))
                             (gethash "descEn" event))))
        (message (gethash "descEn" (gethash "error" json)))))))
#+END_SRC
** Transparency
#+BEGIN_SRC emacs-lisp
(defun transparency-fn(step)
  (lambda ()
    (interactive)
    (unless (display-graphic-p nil)
      (error "Cannot adjust opacity of this frame"))

    (let* ((alpha (if (consp (frame-parameter nil 'alpha))
                      (car (frame-parameter nil 'alpha))
                    100))
           (new-alpha (min 100 (max frame-alpha-lower-limit (+ step alpha)))))
      (set-frame-parameter nil 'alpha `(,new-alpha ,new-alpha)))))

(global-set-key (kbd "M-C-9") (transparency-fn 5))
(global-set-key (kbd "M-C-8") (transparency-fn -5))
(global-set-key (kbd "M-C-0") '(lambda() (interactive) (modify-frame-parameters nil `((alpha . 100)))))
#+END_SRC

** Font size
#+begin_src emacs-lisp
(defun font-size-fn (step)
  (lambda ()
    (interactive)
    (text-scale-adjust step)))

(global-set-key (kbd "C-(") (font-size-fn 0.5))
(global-set-key (kbd "C-*") (font-size-fn -0.5))
(global-set-key (kbd "C-)") (font-size-fn 0))
#+end_src

** Custom scrolling
#+BEGIN_SRC emacs-lisp
(defun kwarks/next-line ()
  (interactive)
  (next-line)
  (scroll-up-line))

(defun kwarks/previous-line ()
  (interactive)
  (previous-line)
  (scroll-down-line))

(global-set-key [M-down] 'kwarks/next-line)
(global-set-key [M-up] 'kwarks/previous-line)
#+END_SRC
** Show decrypted org entry
org-decrypt-entry modifies org file by replacing encrypted content.
This function decrypts and displays org-mode encrypted entry in a separate read-only buffer.

#+BEGIN_SRC emacs-lisp
(defun kwarks/org-display-decrypted-entry ()
  "Display decrypted content of the current headline in a new read-only buffer."
  (interactive)
  (require 'epg)
  (unless (org-before-first-heading-p)
    (org-with-wide-buffer
     (org-back-to-heading t)
     (let ((heading-point (point))
	   (heading-was-invisible-p
	    (save-excursion
	      (outline-end-of-heading)
	      (org-invisible-p))))
       (org-end-of-meta-data)
       (when (looking-at "-----BEGIN PGP MESSAGE-----")
	 (setq-local epg-context (epg-make-context nil t t))
	 (let* ((end (save-excursion
		       (search-forward "-----END PGP MESSAGE-----")
		       (forward-line)
		       (point)))
		(encrypted-text (buffer-substring-no-properties (point) end))
		(decrypted-text
		 (decode-coding-string
		  (epg-decrypt-string
		   epg-context
		   encrypted-text)
		  'utf-8)))
	   (let* ((entry-name (elt (org-heading-components) 4))
		  (buf-name (concat "*decrypted: " entry-name  "*"))
		  (buf (get-buffer-create buf-name)))
	     (with-current-buffer buf
	       (read-only-mode -1)
	       (erase-buffer)
	       (insert decrypted-text)
	       (read-only-mode)
	       (org-mode)
	       (pop-to-buffer buf)))
	   nil))))))
#+END_SRC
** Toggle image display
#+BEGIN_SRC emacs-lisp
(defvar-local endless/display-images t)

(defun endless/toggle-image-display ()
  "Toggle images display on current buffer."
  (interactive)
  (setq endless/display-images
        (null endless/display-images))
  (endless/backup-display-property endless/display-images))

(defun endless/backup-display-property (invert &optional object)
  "Move the 'display property at POS to 'display-backup.
Only applies if display property is an image.
If INVERT is non-nil, move from 'display-backup to 'display
instead.
Optional OBJECT specifies the string or buffer. Nil means current
buffer."
  (let* ((inhibit-read-only t)
         (from (if invert 'display-backup 'display))
         (to (if invert 'display 'display-backup))
         (pos (point-min))
         left prop)
    (while (and pos (/= pos (point-max)))
      (if (get-text-property pos from object)
          (setq left pos)
        (setq left (next-single-property-change pos from object)))
      (if (or (null left) (= left (point-max)))
          (setq pos nil)
        (setq prop (get-text-property left from object))
        (setq pos (or (next-single-property-change left from object)
                      (point-max)))
        (when (eq (car prop) 'image)
          (add-text-properties left pos (list from nil to prop) object))))))
#+END_SRC

** Copy buffer file name to clipboard
#+begin_src emacs-lisp
(defun kwarks/buffer-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message filename))))
#+end_src

** Server shutdown
#+begin_src emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))
#+end_src

** SQLi configuration
These functions are using connection info from /secrets.el.gpg/
See https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client

| Key binding | What it does                                                      |
|-------------+-------------------------------------------------------------------|
| C-c C-b     | sql-send-buffer                                                   |
| C-c C-c     | sql-send-paragraph                                                |
| C-c C-r     | sql-send-region                                                   |
| C-c C-s     | sql-send-string                                                   |
| C-M-q       | prog-indent-sexp                                                  |
| C-c C-l a   | sql-list-all - lists all of the objects in the USER_OBJECTS view. |
| C-c C-l t   | sql-list-table - lists only the tables owned by the current user  |
| C-c TAB     | sql-product-interactive                                           |

Connection settings should be in defined in /sql-connection-alist/ and passwords should be stored in /secrets-file/, e.g. /secrets.el.gpg/
Here both connection info and password are stored in /secrets.el.gpg/ file:
#+BEGIN_SRC emacs-lisp :tangle no
(setq sql-connection-alist
      '((mydatabase (sql-product 'oracle)
                 (sql-port 1522)
                 (sql-server "localhost")
                 (sql-user "admin")
                 (sql-database "mydatabase"))))

(setq sql-passwords
      '((mydatabase "Passw0rd")))

(provide 'secrets)
#+END_SRC

For Oracle sqlplus edit instantclient_18_1/glogin.sql or $ORACLE_HOME/sqlplus/admin/glogin.sql
#+BEGIN_SRC sql :tangle no
SET WRAP OFF;
SET TRIMSPOOL ON;
SET TRIMOUT ON;
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; oracle database connection setup
(when-osx
 (setq sql-oracle-program "/opt/oracle/instantclient_18_1/sqlplus"))

(defun kwarks/sql-conect (product database-name)
  (if (bound-and-true-p secrets-file)
      (require 'secrets (expand-file-name secrets-file)))

  ;; update the password to the sql-connection-alist
  (let ((connection-info (assoc database-name sql-connection-alist))
        (sql-password (car (last (assoc database-name sql-passwords)))))
    (delete sql-password connection-info)
    (nconc connection-info `((sql-password ,sql-password)))
    (setq sql-connection-alist (assq-delete-all database-name sql-connection-alist))
    (add-to-list 'sql-connection-alist connection-info))

  ;; connect to database
  (setq sql-product product)
  (sql-connect database-name))

(defun oracle-connect (database-name)
  (interactive "MDatabase: ")

  ;; fix sql prompt
  (setq comint-prompt-regexp "^SQL> ")

  (custom-set-variables
   '(comint-prompt-read-only t)
   '(comint-use-prompt-regexp t))
  (custom-set-faces)
  
  (kwarks/sql-conect 'oracle (intern database-name)))

(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (setq tab-width 8)
            (toggle-truncate-lines t)))

#+END_SRC
** Tree mode
Major mode for unix "tree" command

TODO: check https://www.emacswiki.org/emacs/hide-lines.el

#+BEGIN_SRC emacs-lisp
(require 'json)

(defvar tree-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map "v" 'kwarks/tree-view-file)
    (define-key map "o" 'kwarks/tree-find-file)
    (define-key map (kbd "RET") 'kwarks/tree-find-file)
    (define-key map "c" 'kwarks/tree-copy-node-path)
    (define-key map "s" 'kwarks/tree-subtree)
    (define-key map "r" 'kwarks/tree-reload)
    (define-key map (kbd "TAB") 'kwarks/tree-toggle-node)
    (define-key map (kbd "<S-tab>") 'kwarks/tree-toggle-all)
    (define-key map "q" 'kwarks/quit-window)
    map)
  "Keymap for `tree-mode'.")

(defface kwarks/tree-directory-face
  `((t :inherit org-level-1 :height ,(face-attribute 'default :height)))
  "Face for the directory node."
  :group 'tree-mode)

(defface kwarks/tree-file-face
  `((t :inherit org-level-2 :height ,(face-attribute 'default :height)))
  "Face for the file node."
  :group 'tree-mode)

(defface kwarks/tree-link-face
  `((t :inherit org-level-3 :slant italic :height ,(face-attribute 'default :height)))
  "Face for the link node."
  :group 'tree-mode)

(defvar kwarks/tree-ignore-list '("Icon?" ".git" ".idea")
  "Do not list files that match the given pattern.")

(defvar-local tree-path ()
  "Initial tree path")

(defvar-local kwarks--tree-hidden-nodes ()
  "hash-table of invisible nodes.")

(defcustom kwarks/tree-inhibit-help-message nil
  "Non-nil inhibits the help message shown upon entering Tree mode."
  :type 'boolean
  :group 'tree-mode)

(defmacro kwarks--tree-node-action (action)
  `(let ((file-name (get-text-property (point) 'kbd-help)))
     (if file-name (,action file-name))))

(defun kwarks/tree-view-file ()
  "View file."
  (interactive)
  (kwarks--tree-node-action view-file-other-window))

(defun kwarks/tree-find-file ()
  "Edit file."
  (interactive)
  (kwarks--tree-node-action find-file-other-window))

(defun kwarks/tree-subtree ()
  "Open subtree."
  (interactive)
  (kwarks--tree-node-action kwarks/tree))

(defun kwarks/tree-copy-node-path ()
  "Copy node path to clipboard."
  (interactive)
  (kwarks--tree-node-action kill-new))

(defun kwarks/tree-reload ()
  "Reload tree."
  (interactive)
  (kwarks--reload-tree tree-path))

(defun kwarks/quit-window ()
  "Close tree buffer."
  (interactive)
  (clrhash kwarks--tree-hidden-nodes)
  (setq-local kwarks--tree-hidden-nodes nil)
  (quit-window t))

(defun kwarks/tree-toggle-node ()
  "Collapse/expand node."
  (interactive)
  (kwarks--tree-node-action kwarks--tree-toggle-node))

(defun kwarks/tree-toggle-all ()
  "Collapse/expand node including child nodes."
  (interactive)
  (kwarks--tree-node-action kwarks--tree-toggle-all))

(defun kwarks--tree-toggle-all (node)
  (if (gethash node kwarks--tree-hidden-nodes)
      (kwarks--tree-expand-all node)
    (kwarks--tree-collapse-all node)))

(defun kwarks--tree-collapse-all (node)
  (kwarks--tree-collapse-node node t))

(defun kwarks--tree-expand-all (node)
  (save-excursion
    (mapc (lambda (parent)
            (if (string-prefix-p node parent)
                (kwarks--tree-expand-node parent)))
          (hash-table-keys kwarks--tree-hidden-nodes))))

(defun kwarks--tree-hide-node (node start end)
  "Add an overlay from `start' to `end' in the current buffer. Push the
overlay onto the kwarks--tree-hidden-nodes hash-table"
  (let ((overlay (make-overlay start end))
        (items (gethash node kwarks--tree-hidden-nodes)))
    (puthash node (cons overlay items) kwarks--tree-hidden-nodes)
    (overlay-put overlay 'invisible 'hl)))

(defun kwarks--tree-expand-node (node)
  (mapc (lambda (overlay) (delete-overlay overlay)) 
        (gethash node kwarks--tree-hidden-nodes))
  (remhash node kwarks--tree-hidden-nodes))

(defun kwarks--tree-collapse-node (node collapse-children-p)
  (save-excursion
    (forward-line 1)
    
    (while (string-prefix-p node (get-text-property (point) 'parent))
      (let* ((line-start (point))
             (parent (get-text-property (point) 'parent)))
        (kwarks--tree-hide-node
         (if collapse-children-p parent node) line-start (progn (forward-line 1) (point)))))))

(defun kwarks--tree-toggle-node (node)
  (if (gethash node kwarks--tree-hidden-nodes)
      (kwarks--tree-expand-node node)
    (kwarks--tree-collapse-node node nil)))

(defun kwarks--make-tree (root)
  (let ((cmd (format "tree \"%s\" --dirsfirst --noreport -J -l -a -q -I '%s'"
                     root
                     (string-join kwarks/tree-ignore-list "|")))
        (json-object-type 'plist)
        (json-array-type 'list)
        (json-key-type 'symbol))
    (json-read-from-string (shell-command-to-string cmd))))

(defun kwarks--tree-node-set-face (node is-directory)
  (cond (is-directory (propertize node 'font-lock-face 'kwarks/tree-directory-face))
        (t (propertize node 'font-lock-face 'kwarks/tree-file-face))))

(defun kwarks--tree-link-set-face (name target)
  (let ((target-face (if (file-directory-p target)
                         'kwarks/tree-directory-face
                       'kwarks/tree-file-face)))
    (format "%s -> %s" (propertize name 'font-lock-face 'kwarks/tree-link-face)
            (propertize target 'font-lock-face target-face))))

(defun kwarks--normalize-path (path record)
  "Add forward slash to the end of the PATH if it's a directory
   or a link to a directory."
  (let ((type (plist-get record 'type))
        (target (plist-get record 'target)))
    (cond ((string-match "\/$" path) path)
          ((or (and (string-equal type "link")
                    (file-directory-p target))
               (string-equal type "directory")) (format "%s/" path))
          (t path))))

(defun kwarks--make-full-name (parent name)
  (cond ((= 0 (length parent)) name)
        ((string-match "\/$" parent) (format "%s%s" parent name))
        (t (format "%s/%s" parent name))))

(defun kwarks--print-tree (tree parent spacing)
  (while tree
    (let* ((record (car tree))
           (type (plist-get record 'type))
           (is-link (string-equal type "link"))
           (name (plist-get record 'name))
           (full-name (kwarks--normalize-path
                       (kwarks--make-full-name parent name) record))
           (children (plist-get record 'contents))
           (is-root (= (length spacing) 0))
           (is-directory (string-equal type "directory"))
           (has-more (consp (cdr tree)))
           (prefix (if has-more "├──" "└──"))
           (pad (if is-root 0 3))
           (child-spacing (if has-more
                              (format "%s│%s" spacing (make-string pad ?\s))
                            (format "%s %s" spacing (make-string pad ?\s)))))
      (if is-root
          (insert name)
        (insert
         (propertize (format "%s%s %s" spacing prefix
                             (if is-link
                                 (kwarks--tree-link-set-face name (plist-get record 'target))
                               (kwarks--tree-node-set-face name is-directory)))
                     'kbd-help full-name
                     'parent parent)))
      
      (newline)
      (if (and (consp children) (null (plist-get (car children) 'error)))
          (kwarks--print-tree children full-name child-spacing))
      (setq tree (cdr tree)))))

(defun kwarks--get-buffer-directory ()
  "Return active buffer directory or '~'"
  (let ((name (buffer-file-name)))
    (cond ((null name) "~")
          (t (file-name-directory name)))))

(defun kwarks--reload-tree (path)
  (clrhash kwarks--tree-hidden-nodes)
  (let ((pos (point)))
    (read-only-mode -1)
    (erase-buffer)
    (kwarks--print-tree (kwarks--make-tree path) "" "")
    (goto-char pos)))

(define-derived-mode tree-mode special-mode "Tree"
  "Major mode for viewing directory tree."
  (setq-local help-at-pt-display-when-idle t)
  (setq-local kwarks--tree-hidden-nodes (make-hash-table :test 'equal))
  (help-at-pt-set-timer))

(defun kwarks--tree-show-help ()
  (unless kwarks/tree-inhibit-help-message
    (message "Tree mode: type h for commands, q to quit.")))

(defun kwarks/tree (path)
  "Display interactive directory tree."
  (interactive (list (read-directory-name "Directory: " 
                                          (kwarks--get-buffer-directory))))
  (let* ((actual-path (file-name-directory path))
         (buffer-name (format "*tree %s*" actual-path))
         (inhibit-message t))
    (get-buffer-create buffer-name)
    (set-buffer buffer-name)
    (switch-to-buffer buffer-name)
    (tree-mode)
    (setq-local tree-path actual-path)
    (kwarks--reload-tree actual-path)
    (toggle-truncate-lines 1))
  (kwarks--tree-show-help))
#+END_SRC

* Package Management
Initialize use-package. 

Use /:init/ for code that still has meaning if the package is not loaded. Primarily, this is code that you'd like in place even if loading is deferred until a later time. 

Use /:config/ for code that has meaning after the package is loaded.

** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

** Use-Package Settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
      (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
;;      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))

  (use-package quelpa-use-package
    :demand t
    :init (setq quelpa-update-melpa-p nil)
    :config (quelpa-use-package-activate-advice))
#+END_SRC

* Theme
** Theme helper functions
#+BEGIN_SRC emacs-lisp
(require 'color)

(defmacro kwarks/if-dark-theme (action else-action)
  `(if (eq (frame-parameter nil 'background-mode) 'dark)
       ,action
     ,else-action))

(defun kwarks/color-from-theme (lighter-percentage darker-percentage)
  (let* ((bg (face-background 'default))
         (bg-color (if (string= bg "unspecified-bg") "#000000" bg)))

    (kwarks/if-dark-theme
     (color-lighten-name bg-color lighter-percentage)
     (color-darken-name bg-color darker-percentage))))
#+END_SRC

** Suppress GUI features

#+BEGIN_SRC emacs-lisp :tangle yes
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)
#+END_SRC

** Turn off menu, toolbar and scrollbars

#+BEGIN_SRC emacs-lisp :tangle yes
(unless-osx
  (menu-bar-mode -1))
(tool-bar-mode -1)
(set-scroll-bar-mode nil)
#+END_SRC

** Visual bell
Flash modeline for visual bell

#+BEGIN_SRC emacs-lisp :tangle yes
(setq visible-bell nil
      ring-bell-function
      (lambda ()
        (let ((fg (face-foreground 'mode-line))
              (bg (face-background 'mode-line)))
          (set-face-background 'mode-line "#30363F")
          (set-face-foreground 'mode-line "#30363F")
          (run-with-idle-timer 0.1 nil `(lambda ()
                                          (set-face-background 'mode-line ,bg)
                                          (set-face-foreground 'mode-line ,fg))))))
#+END_SRC

** Highlight current line

Ignore line wrappings and highlight entire line for org headers

#+BEGIN_SRC emacs-lisp :tangle yes
(defun visual-line-range ()
  (save-excursion
    (cons
     (progn (vertical-motion 0) (point))
     (progn (vertical-motion 1) (point)))))

(setq hl-line-range-function 'visual-line-range)

(global-hl-line-mode 1)
#+END_SRC

** visual-line
#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(global-visual-line-mode 1)
#+END_SRC

** Main theme
#+BEGIN_SRC emacs-lisp
(defmacro kwarks/with-make-frame (&rest body)
  `(if (daemonp)
       (add-hook 'after-make-frame-functions
                 (lambda (&rest args) (progn ,@body)) t)
     ,@body))

(defun kwarks/set-cursor-color ()
  (set-face-background 'cursor (kwarks/color-from-theme 100 100)))

(defun kwarks/set-hl-line-color ()
  (set-face-background 'hl-line (kwarks/color-from-theme 6 7)))

(defun kwarks/set-linum-color ()
  (require 'linum)
  (set-face-foreground 'linum (kwarks/color-from-theme 20 20)))

(defun kwarks/set-region-color ()
  (set-face-background 'region (color-lighten-name "#2D383E" 10)))

(defun kwarks/set-border-color ()
  (let ((color (kwarks/color-from-theme 5 10)))
    (set-face-attribute 'mode-line nil :overline color)
    (set-face-attribute 'mode-line-inactive nil :overline color)
    (set-face-attribute 'vertical-border nil :foreground color)))

(defun kwarks/set-border-color ()
  (let ((color (kwarks/color-from-theme 5 10)))
    (set-face-attribute 'mode-line nil :foreground "gray" :background nil :box nil :overline color)
    (set-face-attribute 'mode-line-inactive nil :background nil :box nil :foreground "gray" :overline color)
    (set-face-attribute 'vertical-border nil :background nil :foreground color)))

(defun kwarks/set-titlebar-style ()
  (set-frame-parameter nil 'ns-transparent-titlebar t)
  (kwarks/if-dark-theme
   (set-frame-parameter nil 'ns-appearance 'dark)
   (set-frame-parameter nil 'ns-appearance nil)))

(defun kwarks/set-theme-colors (&rest args)
  (kwarks/set-cursor-color)
  (kwarks/set-hl-line-color)
  (kwarks/set-linum-color)
  (kwarks/set-region-color)
  (kwarks/set-border-color)
  (kwarks/set-titlebar-style)
  (set-frame-parameter nil 'alpha '(90 . 90)))

(defun kwarks/set-theme-font ()
  "Use JetBrains Mono font when available. The font should be installed from .emacs.d/fonts folder"
  (let ((theme-font "JetBrains Mono"))
    (when (member theme-font (font-family-list))
      (set-frame-font theme-font))))

(defadvice load-theme (before theme-dont-propagate activate)
  (mapc #'disable-theme custom-enabled-themes))

(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (kwarks/set-theme-colors))

(defun kwarks/set-theme-faces ()
  (custom-set-faces
   `(cursor                   ((t (:background ,(kwarks/color-from-theme 100 100)))))
   '(font-lock-comment-face   ((t (:slant italic :background nil))))
   '(trailing-whitespace      ((t (:foreground "gray"     :background "gray"))))
   '(fringe                   ((t (:foreground "SkyBlue4" :background nil))))))

(defun kwarks/setup-frame (&rest args)
  "Apply titlebar theme for new frames"
  (kwarks/set-theme-font)
  (kwarks/set-titlebar-style)
  (kwarks/set-theme-colors)
  (kwarks/set-theme-faces)
  ;;(set-frame-position nil 350 100)
  ;;(set-frame-size nil 110 40)
  ;;(set-frame-parameter nil 'fullscreen nil))
  )

(kwarks/with-make-frame (kwarks/setup-frame))
(add-hook 'after-make-frame-functions 'kwarks/setup-frame t)

(use-package doom-themes
  :init
  (setq doom-one-brighter-comments t)
  (load-theme 'doom-one t))

#+END_SRC

** org-mode visuals
#+BEGIN_SRC emacs-lisp
(require 'org)
(add-to-list 'org-emphasis-alist
             '("*" (:foreground "red")))

(kwarks/with-make-frame
 (let ((font-size (if (or (cygwin-p) (ms-windows-p))
                      100 130)))
   (custom-set-faces
    `(org-level-1             ((t (:box nil :height ,font-size :foreground "#51afef" :background nil))))
    '(org-level-2             ((t (:foreground "#c678dd" :background nil))))
    '(org-level-3             ((t (:foreground "#a9a1e1" :background nil))))
    '(org-block               ((t (:background nil))))
    '(org-block-begin-line    ((t (:background nil :slant italic))))
    '(org-block-end-line      ((t (:background nil :slant italic))))
    '(font-lock-comment-face  ((t (:background nil))))
    '(org-ellipsis            ((t (:background nil :strike-through nil))))
    '(org-done                ((t (:strike-through t))))
    '(org-headline-done       ((t (:strike-through t))))
    '(org-agenda-done         ((t (:strike-through t))))
    `(org-agenda-date         ((t (:foreground "gray" :height ,font-size :weight normal))))
    `(org-agenda-date-weekend ((t (:height ,font-size :weight normal))))
    `(org-agenda-structure    ((t (:height ,font-size :weight normal))))
    `(org-agenda-date-today   ((t (:foreground "#a9a1e1" :weight normal :slant italic :height ,font-size)))))))

;;org-agenda-date-today
;;  `(trailing-whitespace      ((t (:foreground "gray"     :background "gray"))))
(custom-set-variables
 '(org-pretty-entities t)
 '(org-hide-emphasis-markers t))

#+END_SRC

** Spell checking
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src

* Packages
** s.el
Emacs string manipulation library. 
https://github.com/magnars/s.el

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

** org
*** basic settings
#+BEGIN_SRC emacs-lisp
(require 'org)

;; Create empty diary file if doesn't exists
(unless (file-exists-p diary-file)
  (write-region "" "" diary-file))

;; Show entries for 3 days
(setq diary-number-of-entries 3)
(setq calendar-week-start-day 1)

;; Highlight diary entries in calendar
(setq calendar-mark-diary-entries-flag t)

;; Disable sub-superscripts
(setq org-use-sub-superscripts '{})

;; Disable indentations
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

;; Fold all nodes
(setq org-startup-folded t)

;; Restore window configuration upon exiting agenda.
(setq org-agenda-restore-windows-after-quit t)

;; inline images
(setq org-startup-with-inline-images t)
(setq org-image-actual-width nil)

(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "ACTIVE(a)" "|" "DONE(d!/!)")
              (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
              (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
      org-todo-repeat-to-state "ACTIVE")

(setq org-todo-keyword-faces
      (quote (("ACTIVE" :inherit warning)
              ("PROJECT" :inherit font-lock-string-face))))
#+END_SRC

*** org-crypt
#+BEGIN_SRC emacs-lisp
;; Encrypted entries
(require 'org-crypt)
(org-crypt-use-before-save-magic)

;; org entries with :crypt: tag will be encrypted automatically
;; use C-c C-c to add tag
;; use M-x org-decrypt-entry to decrypt
(setq org-tags-exclude-from-inheritance (quote ("crypt")))

;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
;; use gpg --list-keys to find key id
(setq org-crypt-key "0645F0FB333B0EAA60279838995D889E67758C18")
#+END_SRC

*** org-agenda
see https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html

#+BEGIN_SRC emacs-lisp
(setq org-agenda-block-separator 8211 ; nicer separators
      org-agenda-compact-blocks nil)

(setq org-todo-dir (expand-file-name "org-todo" user-emacs-directory))
(unless (file-directory-p org-todo-dir)
  (make-directory org-todo-dir t))

(require 's)
(setq org-agenda-exclude-list '("inbox.org"))
(setq org-agenda-files
      (seq-filter (lambda (file)
                    (let ((regex
                           (mapconcat (lambda (x)
                                        (concat x "$")) org-agenda-exclude-list  "\\|")))
                      (not (s-matches-p regex file))))
                  (file-expand-wildcards (concat org-todo-dir "/*.org"))))

(setq org-tag-alist '(("PROJECT" . ?p)))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun zin/org-agenda-skip-tag (tag &optional others)
  "Skip all entries that correspond to TAG.

If OTHERS is true, skip all entries that do not correspond to TAG."
  (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
        (current-headline (or (and (org-at-heading-p)
                                   (point))
                              (save-excursion (org-back-to-heading)))))
    (if others
        (if (not (member tag (org-get-tags-at current-headline)))
            next-headline
          nil)
      (if (member tag (org-get-tags-at current-headline))
          next-headline
        nil))))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PROJECT"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Projects:")))
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                          (zin/org-agenda-skip-tag "PROJECT")
                          (org-agenda-skip-if nil '(scheduled deadline))))))))))

(defun kwarks/agenda (&optional arg)
  "Display up-to-date week agenda."
  (interactive)
  (org-agenda arg "c")
  (org-agenda-redo)
  (toggle-truncate-lines 1))
#+END_SRC

*** org-babel-to-buffer
/C-c C-e/ to evaluate org source blocks to a separate buffer.

#+BEGIN_SRC emacs-lisp
(defun kwarks--org-babel-get-result ()
  "Get the result of the current source block."
  (let ((location (org-babel-where-is-src-block-result)))
    (when location
      (save-excursion
        (goto-char location)
        (when (looking-at (concat org-babel-result-regexp ".*$"))
          (buffer-substring
           (save-excursion
             (skip-chars-backward " \r\t\n")
             (line-beginning-position 2))
           (progn (forward-line) (org-babel-result-end))))))))

(defun kwarks/org-babel-to-buffer ()
  "Open babel code block results in a separate buffer"
  (interactive)
  
  (org-babel-execute-src-block)

  (let ((result (kwarks--org-babel-get-result))
        (result-buffer (get-buffer-create "*Org-Babel Results*")))
    (org-babel-remove-result)
    
    (with-current-buffer result-buffer
      (erase-buffer)
      (insert result)
      (goto-char (point-min))
      (org-mode))
    (display-buffer result-buffer)))

(defun kwarks--org-mode-config ()
  "To use with `org-mode-hook'"
  (local-set-key (kbd "C-c C-e") 'kwarks/org-babel-to-buffer))

(add-hook 'org-mode-hook 'kwarks--org-mode-config)
#+END_SRC
*** org-download
https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/

Install pngpaste:
#+BEGIN_SRC sh
brew install pngpaste
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-download-image-dir "~/Dropbox/notes/screenshots")

(use-package org-download
  :after org
  :defer nil
  :init
  (unless (file-directory-p org-download-image-dir)
    (make-directory org-download-image-dir t))
  :custom
  (org-download-method 'directory)
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  (org-image-actual-width 600)
  (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
  :bind
  ("C-M-y" . org-download-screenshot)
  :config
  (require 'org-download))
#+END_SRC

** doom-modeline
#+BEGIN_SRC emacs-lisp
(defun init-doom-modeline ()
  (require 'doom-modeline)

  (setq doom-modeline-icon nil)
  (doom-modeline-mode)

  (setq display-time-day-and-date t)
  (setq display-time-string-forms
        '((propertize (format-time-string " %a %b %d, %R" now) 'weight 'normal)))
  (display-time-mode t)

  (doom-modeline-def-modeline 'my-simple-line
    '(matches buffer-info remote-host parrot)
    '(buffer-position selection-info minor-modes process vcs checker input-method buffer-encoding battery misc-info major-mode))

  (doom-modeline-set-modeline 'my-simple-line 'default)
  (remove-hook 'focus-in-hook #'doom-modeline-set-selected-window)
  (remove-hook 'focus-out-hook #'doom-modeline-unset-selected-window))

(use-package doom-modeline
  :hook (after-init . init-doom-modeline))
#+END_SRC
** crux
Set C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.

#+BEGIN_SRC emacs-lisp
(use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)))
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

** diminish
This package implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC
** saveplace

#+BEGIN_SRC emacs-lisp
(require 'saveplace)
(setq save-place-file (expand-file-name "places" user-emacs-directory))

(if (fboundp #'save-place-mode)
    (save-place-mode 1)
  (setq-default save-place t))
#+END_SRC

** undo-tree
Use "C-/" or "C-z" for undo, and "C-?" or "C-Z" for redo, "C-x u" to display a tree view of undo history.

#+BEGIN_SRC emacs-lisp
(defun kwarks/init-persistent-undo ()
  (let ((undo-dir (expand-file-name "undo" user-emacs-directory)))
    (unless (file-directory-p undo-dir)
      (make-directory undo-dir))
    (setq undo-tree-history-directory-alist `(("." . ,undo-dir)))
    (setq undo-tree-auto-save-history t)))

(use-package undo-tree
  :bind (("C-z" . undo)
         ("C-S-z" . redo))
  :config
  ;; Persistent redo is causing overflow over time
  ;; Disabled for now, test later
  ;; (kwarks/init-persistent-undo)
  (defalias 'redo 'undo-tree-redo)

  :init
  (global-undo-tree-mode 1))
#+END_SRC
** session
#+BEGIN_SRC emacs-lisp
(use-package session)

(setq session-save-file (expand-file-name ".session" user-emacs-directory))
(setq session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)")
(add-hook 'after-init-hook 'session-initialize)

;; automatically reveal folded sections in org file
(add-hook 'session-after-jump-to-last-change-hook
	  (lambda ()
	    (when (and (or (memq major-mode  '(org-mode outline-mode))
			   (and (boundp 'outline-minor-mode)
				outline-minor-mode))
		       (outline-invisible-p))
	      (if (eq major-mode 'org-mode)
		  (org-reveal)
		(show-subtree)))))

(session-jump-to-last-change)

#+END_SRC
** ido-completing-read+
This package replaces stock emacs completion with ido completion wherever it is possible.

#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :config
  (ido-ubiquitous-mode t))
#+END_SRC
** exec-path-from-shell
Ensure environment variables inside Emacs look the same as in the user's shell.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE"))
    (add-to-list 'exec-path-from-shell-variables var)))

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

** auto-dim-other-buffers
The auto-dim-other-buffers-mode is a global minor mode which makes non-current buffer less prominent making it more apparent which window has a focus.

#+BEGIN_SRC emacs-lisp
(defun kwarks/set-auto-dim-other-buffers-background (&rest args)
  (set-face-background 'auto-dim-other-buffers-face (kwarks/color-from-theme 3 3)))

(use-package auto-dim-other-buffers
  :config
  (setq auto-dim-other-buffers-dim-on-focus-out nil)
  (kwarks/set-auto-dim-other-buffers-background)
  :init
  (auto-dim-other-buffers-mode t))

(advice-add 'load-theme :after 'kwarks/set-auto-dim-other-buffers-background)
#+END_SRC

** focus-mode
Focus provides focus-mode that dims the text of surrounding sections.

#+BEGIN_SRC emacs-lisp
(use-package focus)
#+END_SRC
** smex
Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to recently and most frequently used commands. And to all the other commands, too.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :init
  ;; Change path for ~/.smex-items
  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish (ivy-mode . "")
  :bind (("M-x" . counsel-M-x)
         ("\C-s" . swiper)
         ("C-x C-f" . counsel-find-file)
         ("C-c C-r" . ivy-resume)
         ("C-x k" . kwarks/kill-buffer)
         ("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("<f1> l" . counsel-find-library)
         ("<f2> i" . counsel-info-lookup-symbol)
         :map ivy-mode-map
         ("C-'" . ivy-avy)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-history))
  :init
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
        ;; allow input not in order
        '((t   . ivy--regex-ignore-order)))
  :config
  (ivy-mode 1))

(defmacro kwarks--with-sudo (&rest body)
  "Run '(shell-command) with root privileges"
  `(let ((default-directory "/sudo::"))
     ,@body))

(defun ivy--make-process-list (str collection predicate)
  (mapcar (lambda (ps)
            (let ((ps-info (split-string (string-trim ps))))
              (format "%-6s %-20s %s" (car ps-info) (cadr ps-info) (string-join (cddr ps-info) " "))))
          (cdr (split-string (shell-command-to-string "ps -eo pid,user,command") "\n+"))))

(defun ivy--kill-process (ps)
  (let* ((me (string-trim (shell-command-to-string "whoami")))
         (ps-info (split-string (string-trim ps)))
         (pid (car ps-info))
         (pid-user (cadr ps-info))
         (cmd (format "kill -9 %s" pid)))
    (message (format "killing %s, me: %s, pid-user: %s" pid me pid-user))
    (if (string= me pid-user)
        (shell-command-to-string cmd)
      (kwarks--with-sudo (shell-command cmd)))))

(defun kwarks/kill-process ()
  "Kill OS process"
  (interactive)
  (ivy-read "Kill process: " #'ivy--make-process-list
            :action #'ivy--kill-process))

(defun kwarks/kill-buffer ()
  "kill buffer."
  (interactive)
  (ivy-read "Kill buffer: " #'internal-complete-buffer
            :preselect (buffer-name (current-buffer))
            :action #'kill-buffer
            :caller 'kwarks/kill-buffer))

(use-package avy)

(use-package ivy-rich
  :after ivy
  :demand t
  :init
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  :config
  (setq ivy-rich-display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-switch-buffer-transformer (:width 40))
            (ivy-rich-switch-buffer-size (:width 7))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 20 :face warning))
            (ivy-rich-switch-buffer-project (:width 25 :face success))
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
           :predicate
           (lambda (cand) (get-buffer cand)))
          kwarks/kill-buffer
          (:columns
           ((ivy-switch-buffer-transformer (:width 40))
            (ivy-rich-switch-buffer-size (:width 7))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 20 :face warning))
            (ivy-rich-switch-buffer-project (:width 25 :face success))
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
           :predicate
           (lambda (cand) (get-buffer cand)))        
          counsel-find-file
          (:columns
           ((ivy-read-file-transformer)
            (ivy-rich-counsel-find-file-truename (:face font-lock-doc-face))))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 0.8))
            (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
          package-install
          (:columns
           ((ivy-rich-candidate (:width 30))
            (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
            (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
            (ivy-rich-package-install-summary (:face font-lock-doc-face))))))
  
  (ivy-rich-mode 1))
#+END_SRC

** flyspell-correct
Correcting misspelled words with flyspell using favourite interface.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+END_SRC

** fzf
An Emacs front-end for fzf - a command-line fuzzy finder
Not sure yet if I need it

#+BEGIN_SRC emacs-lisp :tangle no
(fzf/with-command "ps -eo pid,user,command" 'print)
(fzf/with-entries (list "a" "b" "c") 'print)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package fzf)

(require 'fzf)

(defun fzf/after-term-handle-exit-with-action (action)
  (lambda (process-name msg)
    (if (string-match-p "finished" msg)
        (let* ((text (buffer-substring-no-properties (point-min) (point-max)))
               (lines (split-string text "\n" t "\s*>\s+"))
               (target (car (last (butlast lines 1)))))
          (read-only-mode -1)
                                        ; fill output with dummy value to make original function happy
          (erase-buffer)
          (insert (format "%s\n%s" process-name msg))
          (fzf/after-term-handle-exit process-name msg)

          (message (format "target %s" target))
          (funcall action target))
      (fzf/after-term-handle-exit process-name msg))
    (advice-remove 'term-handle-exit (fzf/after-term-handle-exit-with-action action))))

(defun fzf/start-with-action (directory command action)
  (advice-add 'term-handle-exit
              :after (fzf/after-term-handle-exit-with-action action))
  (fzf/start (if directory directory default-directory) command)
  (advice-remove 'term-handle-exit #'fzf/after-term-handle-exit))

(defun fzf/with-command (command action &optional directory)
  (interactive)
  (fzf/start-with-action directory command action))

(defun fzf/with-entries (entries action &optional directory)
  "`entries' is a list of strings that is piped into `fzf' as a source."

  (interactive)
  (fzf/with-command (concat "echo \"" (mapconcat (lambda (x) x) entries "\n") "\"") action directory))

(defun fzf/kill-process ()
  (interactive)
  (let ((fzf/args (concat fzf/args " -e --tac")))
    (fzf/with-command "ps -eo pid,user,command"
                      (lambda (choice)
                        (let ((default-directory "/sudo::")
                              (pid (car (split-string (string-trim choice) "\s+"))))
                          (print (format "killing process with pid %s" pid))
                          (shell-command (format "kill %s %s" -9 pid)))))))
#+END_SRC

** company
Company stands for “complete anything” and is a modular in-buffer completion mechanism.

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (("M-C-/" . company-complete)
         :map company-mode-map
         ("M-/" . company-complete)
         :map company-active-map
         ("M-/" . company-select-next))
  :config
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case t)
  
  :init
  (global-company-mode)
  (diminish 'company-mode "CMP"))

(use-package company-quickhelp
  :bind (:map company-active-map
              ("C-c h" . company-quickhelp-manual-begin))
  :init
  (company-quickhelp-mode))
#+END_SRC
** paradox
Project for modernizing Emacs' Package Menu. With improved appearance, mode-line information. Github integration, customizability, asynchronous upgrading, and more.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq paradox-github-token t))
#+END_SRC

** switch-window
Make "C-x o" prompt for a target window when there are more than 2

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :config
  (setq-default switch-window-shortcut-style 'alphabet)
  (setq-default switch-window-timeout nil)
  :bind (("C-x o" . switch-window)))
#+END_SRC
** guide-key
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :config
    (setq guide-key/guide-key-sequence '("C-x" "C-c" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n" "C-x C-r" "C-x r" "M-s" "C-h"))
    :init
    (guide-key-mode 1)
    (diminish 'guide-key-mode))
#+END_SRC
** dired-single
#+BEGIN_SRC emacs-lisp
(use-package dired-single)

(defun kwarks/dired-init ()
  (define-key dired-mode-map [return] 'dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (dired-single-buffer "..")))))

(if (boundp 'dired-mode-map)
    (kwarks/dired-init)
  (add-hook 'dired-load-hook 'kwarks/dired-init))
#+END_SRC
** page-break-lines
This Emacs library provides a global mode which displays ugly form feed characters as tidy horizontal rules.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package page-break-lines
  :config
  (push 'browse-kill-ring-mode page-break-lines-modes)
  (push 'special-mode page-break-lines-modes)
  :init
  (global-page-break-lines-mode)
  :diminish page-break-lines-mode)
#+END_SRC

** toc-org
toc-org helps to have an up-to-date table of contents in org files.

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC

** emacs-htmlize
Convert buffer text and decorations to HTML

To convert org subtree:

M-x org-export-dispatch
C-s (change the export scope to subtree)
h (HTML menu)
h (export to HTML file)

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

** copy-as-format
Emacs function to copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code
e.g. copy-as-format-slack, copy-as-format-github

#+BEGIN_SRC emacs-lisp
(use-package copy-as-format)
#+END_SRC
** alert
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (when-osx
    (setq alert-default-style 'osx-notifier)))
#+END_SRC
** org-wiki
Org-wiki is a org-mode extension that provides tools to manage and build personal wiki or desktop wiki where each wiki page is a org-mode file.

#+BEGIN_SRC emacs-lisp
(use-package helm)
(use-package org-wiki
  :demand t
  :init
  (setq org-wiki-location (expand-file-name "wiki" user-emacs-directory))
  (unless (file-directory-p org-wiki-location)
    (make-directory org-wiki-location t))
  
  :quelpa (org-wiki
           :repo "caiorss/org-wiki"
           :fetcher github))
#+END_SRC

** org-brain
[[https://github.com/Kungsgeten/org-brain][org-brain]] implements a variant of [[https://en.wikipedia.org/wiki/Concept_map][concept mapping]] in Emacs, using org-mode. 
It is heavily inspired by a piece of software called [[http://thebrain.com/][The Brain]].

#+begin_src emacs-lisp
(use-package org-brain
  :init
  (setq org-brain-path (expand-file-name "org-brain" user-emacs-directory))
  (unless (file-directory-p org-brain-path)
    (make-directory org-brain-path t))

  :config
  (require 'org-capture)
  (setq org-id-track-globally t)
  (setq org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory))
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 50))
#+end_src

** org-pretty-table
This package makes org tables use unicode symbols for drawing.
Currently it is very inefficient...

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-pretty-table
  :quelpa (org-pretty-table
	   :url "https://github.com/Fuco1/org-pretty-table.git"
	   :fetcher git
	   :files ("*.el")
	   :upgrade nil))
#+END_SRC

** counsel-dash
Support for the http://kapeli.com/dash documentation browser. See https://github.com/dash-docs-el/counsel-dash

#+BEGIN_SRC emacs-lisp
(defalias 'counsel-dash-installed-docsets 'dash-docs-installed-docsets)

(defun counsel-dash--use-docset (name docset)
  "Install DOCSET if it's not installed yet."
  (unless (member name (counsel-dash-installed-docsets))
    (counsel-dash-install-docset docset)))

(use-package counsel-dash
  :bind (("C-c h" . counsel-dash-at-point))  
  :config
  (if (featurep 'xwidget-internal)
      (setq counsel-dash-browser-func 'xwidget-webkit-browse-url)
    (setq counsel-dash-browser-func 'eww))
  
  (setq counsel-dash-docsets-path (expand-file-name ".docsets" user-emacs-directory))
  (unless (file-exists-p counsel-dash-docsets-path)
    (make-directory counsel-dash-docsets-path))

  (setq counsel-dash-common-docsets '("Common Lisp" "Python 3"))

  (counsel-dash--use-docset "Common Lisp" "Common_Lisp")
  (add-hook 'lisp-mode-hook (lambda ()
                              (setq-local counsel-dash-docsets '("Common Lisp"))))

  (counsel-dash--use-docset "Emacs Lisp" "Emacs_Lisp")
  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (setq-local counsel-dash-docsets '("Emacs Lisp"))))

  (counsel-dash--use-docset "Python 3" "Python 3")
  (add-hook 'python-mode-hook (lambda ()
                                (setq-local counsel-dash-docsets '("Python 3")))))
#+END_SRC
** transpose-frame
Transpose windows arrangement in a frame.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame)
#+END_SRC

** reverse-im
Creates translation mappings for input-methods other than default english one, so all keybindings are usable while non-default system layout is active.

#+BEGIN_SRC emacs-lisp
(use-package reverse-im
  :demand t
  :config
  (add-to-list 'reverse-im-modifiers 'super)
  (reverse-im-activate "russian-computer"))
#+END_SRC

** osx dictionary

#+BEGIN_SRC emacs-lisp
(when-osx
 (use-package osx-dictionary
   :bind (("C-c d" . osx-dictionary-search-word-at-point))))

#+END_SRC
** alert
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (when-osx
    (setq alert-default-style 'osx-notifier)))
#+END_SRC

** nov.el - ePub reader
#+BEGIN_SRC emacs-lisp
(use-package nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC

** weather
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :init
  (setq wttrin-default-cities '("Toronto"))
  (setq wttrin-default-accept-language '("Accept-Language" . "en-US")))

(defun kwarks/weather ()
  "Show weather with default city and metric units"
  (interactive)
  (require 'wttrin)

  (let* ((city (car wttrin-default-cities))
         (weather-buffer (format "*Weather - %s*" city))
         (url-user-agent "curl"))
    (if (buffer-live-p (get-buffer weather-buffer))
        (kill-buffer weather-buffer))
    (wttrin-query (format "%s?m" city))
    (rename-buffer weather-buffer)
    (toggle-truncate-lines 1)))
#+END_SRC

** fancy-battery
Show battery level in mode line

#+BEGIN_SRC emacs-lisp
(require 'battery)

(defun has-battery ()
  (if battery-status-function
      (let ((b-status (cdr (assoc '66 (funcall battery-status-function)))))
	(not (string= b-status "N/A")))))

(use-package fancy-battery
  :if (has-battery)
  :config
  (setq fancy-battery-show-percentage t)
  :init
  (fancy-battery-mode))
#+END_SRC

** horoscope
Just for fun.

#+BEGIN_SRC emacs-lisp
(use-package horoscope)
#+END_SRC
** eww
Disable eww images and switch to readability mode by default.

#+BEGIN_SRC emacs-lisp
(defhydra kwarks/eww-hydra (:color blue :hint nil)
  "
_&_ view in external browser
list _B_ookmarks
add _b_ookmark
_g_: reload page
_R_eadability mode
_f_ocus mode
back ur_l_
_n_ext url
_p_revious url
_v_iew source
"
  ("&" eww-browse-with-external-browser)
  ("B" eww-list-bookmarks)
  ("b" eww-add-bookmark)
  ("g" eww-reload)
  ("R" eww-readable)
  ("f" focus-mode)
  ("i" endless/toggle-image-display)
  ("l" eww-back-url)
  ("n" eww-next-url)
  ("p" eww-previous-url)
  ("v" eww-view-source))

(defun kwarks/eww-actions ()
  (interactive)
  (kwarks/eww-hydra/body))

(defun kwarks/around-eww-render (eww-render-fn &rest args)
  (let ((shr-inhibit-images t))
    (apply eww-render-fn args)))

(defun kwarks/after-eww-render ()
  "Turn on Readability mode and Focus mode"
  (unwind-protect
      (progn
	(eww-readable)
	(if (fboundp 'focus-mode) (focus-mode)))))

(advice-add 'eww-render :around #'kwarks/around-eww-render)
(add-hook 'eww-after-render-hook #'kwarks/after-eww-render)
#+END_SRC
** org-web-tools
Functions and commands useful for retrieving web page content and processing it into Org-mode content.
See https://github.com/alphapapa/org-web-tools

Commands that process HTML into Org require [[https://pandoc.org/][Pandoc]].

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools)
#+END_SRC

** dired-sidebar
#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
#+END_SRC
** xterm-color
[[https://github.com/atomontage/xterm-color][xterm-color]] is an ANSI control sequence to text-property translator

Features:
- Regular ANSI color support
- XTERM 256 color support
- AIXTERM bright foreground color
- AIXTERM bright background color (since 1.8)
- Use bold instead of bright (since 1.8)
- Works with compilation-mode
- Works with eshell
- Bonus: Faster than ansi-color.el

Don't forget to setenv TERM xterm-256color

#+begin_src emacs-lisp :tangle no
(defun init-shell-mode ()
  (let ((buffer (generate-new-buffer "*xterm-color-test*")))
    (with-current-buffer buffer
      (insert (xterm-color-filter "\x1b[0;1;3;4"))
      (insert (xterm-color-filter ";35"))
      (insert (xterm-color-filter ";51mThis is only a test"))
      (insert (xterm-color-filter "\x1b[0m")))
    (switch-to-buffer buffer))

  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t))))

(defun init-eshell-mode ()
  (require 'eshell)
  (require 'esh-mode)

  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))

  (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))

(defun init-compilation-shell-minor-mode ()
  (setq compilation-environment '("TERM=xterm-256color"))

  (add-hook 'compilation-start-hook
            (lambda (proc)
              ;; We need to differentiate between compilation-mode buffers
              ;; and running as part of comint (which at this point we assume
              ;; has been configured separately for xterm-color)
              (when (eq (process-filter proc) 'compilation-filter)
                ;; This is a process associated with a compilation-mode buffer.
                ;; We may call `xterm-color-filter' before its own filter function.
                (set-process-filter
                 proc
                 (lambda (proc string)
                   (funcall 'compilation-filter proc
                            (xterm-color-filter string))))))))

(use-package xterm-color
  :config
  (init-shell-mode)
  (init-eshell-mode)
  (init-compilation-shell-minor-mode))
#+end_src

** annot
A global annotator/highlighter for GNU Emacs

[C-x C-a] - Add a new annotation
            Highlight the current region if any (annot-edit/add)
[C-x C-r] - Remove the annotation/highlight at point (annot-remove)
[C-x C-i] - Insert a new image at point (annot-add-image)

#+BEGIN_SRC emacs-lisp
(use-package annot
  :quelpa (annot
           :url "https://github.com/ghoshi/annot.git"
           :fetcher git
           :files ("src/*.el")
           :upgrade nil)
  :init
  (require 'annot)
  (setq annot-directory "~/.emacs.d/annot")
  ;; C-x C-a conflicts with Slime, disable it
  (define-key ctl-x-map "\C-a" nil)
  (custom-set-faces
   '(annot-text-face ((t (:background nil :foreground "yellow" :slant italic))))))
#+END_SRC

* Programming
** magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
#+END_SRC

** git-gutter
Display file change indicators on a fringe and more

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :init (global-git-gutter-mode)
  :config
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
					:hint nil)
    "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
		(git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
		(git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
		;; git-gutter-fringe doesn't seem to
		;; clear the markup right away
		(sit-for 0.1)
		(git-gutter:clear))
     :color blue))
  
  (defun git-gutter-actions ()
    (interactive)
    (hydra-git-gutter/body)))
#+END_SRC

** git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC

** ztree-diff
ztree-diff is a directory-diff tool for Emacs inspired by commercial tools like Beyond Compare or Araxis Merge. It supports showing the difference between two directories; calling Ediff for not matching files, copying between directories, deleting file/directories, hiding/showing equal files/directories.

#+BEGIN_SRC emacs-lisp
(use-package ztree
  :config
  (setq ztree-draw-unicode-lines t))
#+END_SRC

** scratch
M-x scratch will create a scratch buffer for the current mode.

#+BEGIN_SRC emacs-lisp
(use-package scratch)
#+END_SRC

** projectile
Projectile is a quick and easy project management package that "just works". We're
going to install it and make sure it's loaded immediately.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :init
  (projectile-mode))
#+END_SRC

** lsp-mode
A Emacs Lisp library for implementing clients for servers using Microsoft's Language Server Protocol.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode)
(use-package lsp-ui)
#+END_SRC
** lisp

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.sexp\\'" . lisp-mode))
#+end_src

*** electric-pair-mode
Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters. 

#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
#+END_SRC
*** slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :init
  (setq slime-protocol-version 'ignore)
  (setq slime-net-coding-system 'utf-8-unix)
  (setq slime-complete-symbol*-fancy t)
  (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
  (setq inferior-lisp-program "sbcl")

  :config
  (require 'slime)
  (slime-setup '(slime-fancy))
  (add-to-list 'auto-mode-alist '("\\.cl\\'" . lisp-mode)))

#+END_SRC
*** scheme
It should simply work:

M-x run-scheme
M-x scheme-mode
C-x C-e to run code

Chicken integration instructions:

#+BEGIN_SRC sh
brew install chicken
chicken-install -s symbol-utils apropos chicken-doc fmt slime
cd `csi -p '(chicken-home)'`
curl http://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(defun kwarks/init-scheme ()
  (require 'slime)
  (setq slime-csi-path "/usr/local/bin/csi")
  (add-to-list 'load-path "/usr/local/lib/chicken/8/")
  (autoload 'chicken-slime "chicken-slime" "SWANK backend for Chicken" t)
  (add-hook 'scheme-mode-hook (lambda () (slime-mode t))))

(if (file-exists-p "/usr/local/lib/chicken")
    (kwarks/init-scheme))
#+END_SRC
*** geiser
Geiser is a collection of Emacs major and minor modes that conspire with one or more Scheme interpreters to keep the Lisp Machine Spirit alive. It draws inspiration (and a bit more) from environments such as Common Lisp’s Slime, Factor’s FUEL, Squeak or Emacs itself, and does its best to make Scheme hacking inside Emacs (even more) fun.

#+BEGIN_SRC emacs-lisp
(use-package geiser)
#+END_SRC

*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol)
#+END_SRC

*** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit)
#+END_SRC

*** aggressive-indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :init
  (add-hook 'lisp-mode-hook 'aggressive-indent-mode)
  (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode))
#+END_SRC

*** litable
#+BEGIN_SRC emacs-lisp
(use-package litable)
#+END_SRC

** racket
#+BEGIN_SRC emacs-lisp
(use-package racket-mode)
#+END_SRC

** java
To make javacomp work with sbt projects use /retrieveManaged := true/ option.
This will copy all managed dependencies to <build-root>/lib_managed/ and make it available for javacomp.

#+BEGIN_SRC emacs-lisp
(use-package lsp-javacomp
  :commands lsp-javacomp-enable
  :init
  (add-hook 'java-mode-hook
            (lambda ()
              ;; Load company-lsp before enabling lsp-javacomp, so that function
              ;; parameter snippet works.
              (require 'company-lsp)
              ; (lsp-javacomp-enable)
              ;; Use company-lsp as the company completion backend
              ; (set (make-variable-buffer-local 'company-backends) '(company-lsp))
              ;; Optional company-mode settings
              (set (make-variable-buffer-local 'company-idle-delay) 0.1)
              (set (make-variable-buffer-local 'company-minimum-prefix-length) 1)))
  ;; Optional, make sure JavaComp is installed. See below.
  :config
  (lsp-javacomp-install-server))
#+END_SRC

** scala
*** sbt
#+BEGIN_SRC emacs-lisp
(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+END_SRC

*** scala-mode
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))
#+END_SRC

** swift
#+BEGIN_SRC emacs-lisp
(use-package swift-mode)
#+END_SRC

** .net
#+BEGIN_SRC emacs-lisp

(defun kwarks/init-csharp-mode ()
  (setq indent-tabs-mode nil)
  (setq c-syntactic-indentation t)
  (c-set-style "ellemtel")
  (setq c-basic-offset 4)
  (setq truncate-lines t)
  (setq tab-width 4)
  (local-set-key (kbd "C-c C-c") 'recompile))

(use-package csharp-mode
  :config
  (add-hook 'csharp-mode-hook 'kwarks/init-csharp-mode))

(use-package dotnet
  :config
  (add-hook 'csharp-mode-hook 'dotnet-mode))

(use-package omnisharp
  :bind (:map omnisharp-mode-map
	      ("M-." . omnisharp-auto-complete)))
#+END_SRC

** python
Configure python auto-completion using Jedi.
Install server with /M-x jedi:install-server/

- /<C-tab>/ jedi:complete
Complete code at point.

- /C-c ?/ jedi:show-doc
Show the documentation of the object at point.

- /C-c ./ jedi:goto-definition
Goto the definition of the object at point.

- /C-c ,/ jedi:goto-definition-pop-marker
Goto the last point where jedi:goto-definition was called.

#+begin_src emacs-lisp
(setq python-shell-interpreter "/usr/local/bin/python3")
(add-hook 'python-mode-hook 'auto-complete-mode)

(use-package jedi
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t))
#+end_src

** hy
An Emacs major mode for Hy, a lisp embedded in python.

Provides autocompletion, documentation lookup, and all features required to make developing in Hy enjoyable and productive.

IDE components like autocompletion via company-mode rely on jedhy, which can be installed as standard with pip install jedhy in your virtual environment of choice, see https://github.com/ekaschalk/jedhy.

For REPL use M-x run-hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :config
  (setq hy-shell--interpreter-args '("--repl-output-fn" "hy.contrib.hy-repr.hy-repr"))
  :bind (:map hy-mode-map
	      ("C-x C-e" . #'hy-shell-eval-last-sexp)))
#+END_SRC

** immortal-scratch
#+BEGIN_SRC emacs-lisp
(use-package immortal-scratch)
#+END_SRC

** multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors)
#+END_SRC

** dumb-jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g p" . dumb-jump-back)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy))
#+END_SRC

** indent-guide

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :config
  (setq indent-guide-char "┊")
  (setq indent-guide-delay 0.1)
  :init
  (diminish 'indent-guide-mode))

;; (add-hook 'prog-mode-hook 'indent-guide-mode)
#+END_SRC

** sicp
Structure and Interpretation of Computer Programs ebook
#+BEGIN_SRC emacs-lisp
(use-package sicp)
#+END_SRC

** json
#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

** cypher
Cypher is a declarative graph query language that allows for expressive and efficient querying and updating of the graph. 

#+BEGIN_SRC emacs-lisp
(use-package cypher-mode)
#+END_SRC

** http
*** know-your-http-well
HTTP encodings, headers, media types, methods, relations and status codes, all summarized and linking to their specification.

#+BEGIN_SRC emacs-lisp
(use-package know-your-http-well
  :after (ivy)
  :init
  (require 'http-status-codes)
  (require 'http-headers)
  (require 'http-methods)
  (require 'media-types)
  (require 'http-relations)

  (defmacro ivy--know-your-http-well (title source)
    `(ivy-read (format "%s: ^" ,title) (mapcar (lambda (arg)
                                                 (format "%s - %s" (car arg) (caadr arg)))
                                               ,source)))

  (defun kwarks/every-other (lst)
    "Return odd elements of the lst"
    (if (null lst) '()
      (cons (car lst) (kwarks/every-other (cddr lst)))))

  (defun kwarks/http-status-code ()
    (interactive)
    (ivy--know-your-http-well "HTTP status"
                              (mapcar (lambda (arg)
                                        (list (car arg)
                                              (list (format "%s, %s" (caadr arg) (cadadr arg)))))
                                      (kwarks/every-other http-status))))

  (defun kwarks/http-header ()
    (interactive)
    (ivy--know-your-http-well "HTTP header" http-headers))

  (defun kwarks/http-method ()
    "Look up the meaning of HTTP methods"
    (interactive)
    (ivy--know-your-http-well "HTTP method" http-methods))

  (defun kwarks/media-type ()
    "Look up the template of a media-type"
    (interactive)
    (ivy--know-your-http-well "Media-type" media-types))

  (defun kwarks/http-relation ()
    "Look up the meaning of HTTP relations"
    (interactive)
    (ivy--know-your-http-well "HTTP relation" http-relations)))
#+END_SRC

*** Rest Client

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :config
  (add-to-list 'auto-mode-alist '("\\.rest$" . restclient-mode))
  (setq restclient-inhibit-cookies t))

;; An extension to restclient that provides org-babel support.
(use-package ob-restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))

;; Company-mode completion back-end for restclient-mode.
(use-package company-restclient
  :config
  (add-to-list 'company-backends 'company-restclient))
#+END_SRC

*** Http Repl

#+BEGIN_SRC emacs-lisp
(use-package httprepl)
#+END_SRC

* Post init
** Start server
#+BEGIN_SRC emacs-lisp
(unless-windows
 (require 'server)
 (unless (server-running-p)
   (server-start)))
#+END_SRC

** Garbage collection
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
